services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
        restart: true
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - CONNECTION_STRING=${CONNECTION_STRING}
    networks:
      - internal_network

  db:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal_network
    healthcheck:
        test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
        interval: 10s
        retries: 5

  web:
    build:
      context: ./
      dockerfile: Dockerfile
    depends_on:
      - api
    ports:
      - "80:80"
    networks:
      - internal_network

  adminer:
    image: adminer:latest
    restart: always
    depends_on:
      - db
    networks:
      - internal_network

volumes:
  pgdata:

networks:
  internal_network:
    driver: bridge